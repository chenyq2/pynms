syntax = "proto3";

import "google/protobuf/any.proto";

package pynms_api;

// The types of encoding that the API supports. This specifies
// how the client would like the data encoded back. Expanded
// from openconfig-rpc.
enum EncodingType {
	// IETF specification JSON
	JSON_IETF = 0;
	// PyangBind specific internal JSON
	JSON_PYBIND = 100;
}

// The types of command that are supported by the server for
// the Get RPC. This allows filtering of the data that is
// returned from a Get command in the service.
enum GetDataCommand {
	GET_ALL = 0;
	GET_CONFIG = 1;
	GET_OPSTATE = 2;
	GET_OPER = 3;
}

// The types of command that are supported by the server for the
// Set RPC. This allows different modes of inserting configuration
// to be followed.
enum SetDataCommand {
	UPDATE_CONFIG = 0;
	REPLACE_CONFIG = 1;
	DELETE_CONFIG = 2;
}

// Response codes from the API - these are utilised in the response
// to a Get command in the service.
enum RPCResponse {
	OK = 0;
	NOK = 1;
	UNSUPPORTED_PATH = 2;
	INVALID_PATH = 3;
	INVALID_CONFIGURATION = 4;
	UNSUPPORTED_INTERVAL = 5;
	INVALID_SUBSCRIPTION_ID = 6;
	UNSUPPORTED_ENCODING = 7;
}

service OCPyNMS {
	rpc Get(GetRequest) returns (GetResponse);
	rpc Set(SetRequest) returns (SetResponse);

	rpc Subscribe(stream SubscribeRequest) returns (stream SubscribeResponse);
}

// Message sent by the client to the server when a request is
// made.
message GetRequest {
	uint64 request_id = 1;
	EncodingType encoding = 2;
	string prefix = 3;
	GetDataCommand data_type = 4;
	repeated string path = 5;
}

message GetResponseOperation {
	string path = 1;
	string value = 2;
}

// The message used by the server in response to a get request.
message GetResponse {
	uint64 request_id = 1;
	repeated GetResponseOperation response = 2;
	RPCResponse response_code = 3;
	string message = 4;
}

// Submessage used for a set operation - multiple SetRequestOperation
// commands can exist per SetRequest message.
message SetRequestOperation {
	// TODO: why did we lose operation id here?
	//string operation_id = 1;
	SetDataCommand opcode = 1;
	string path = 3;
	string value = 4;
}

// The message that is used by a client for a set request
message SetRequest {
	uint64 request_id = 1;
	//bool transaction = 2;
	EncodingType encoding = 2;
	string prefix = 3;
	repeated SetRequestOperation operation = 5;
}

// The message that is returned by the server in response
// to a set request.
message SetResponse {
	uint64 request_id = 1;
	RPCResponse response_code = 2;
	string message = 3;
}

// The message that is sent by the client within a
// subscribe request
message SubscribeRequest {
	uint64 request_id = 1;
	repeated SubscribeRequestDestination destination = 2;
	repeated SubscribeRequestPath paths = 3;
	uint64 sample_interval = 4;
	uint64 heartbeat_interval = 5;
	bool suppress_redundant = 6; // used to determine whether to suppress unchanged updates
	uint32 originated_qos_marking = 7;
	EncodingType encoding = 8;
}

// A submessage used within a SubscribeRequest to indicate UDP
// destinations
message SubscribeRequestDestination {
	string address = 1; // This would be better encoded as something more efficient - but we need a 128bit number
	uint32 port = 2; // Would prefer a uint16, but there is no such protobuf type
}

// A submessage used within a SubscribeRequest to indicate the
// paths that are to be subscribed to
message SubscribeRequestPath {
	string path = 1;
	string exclude_filter = 2;
}

// The message sent by a server in response to a SubscribeRequest
// and as an ongoing heartbeat
message SubscribeResponse {
	uint32 subscription_id = 1;
	uint64 request_id = 2;
	RPCResponse response_code = 3;
	string message = 4;
}

// A really basic message that can be used to supply subscription
// updates back to a client
message SubscribeUpdateResponse {
	uint32 subscription_id = 1;
	string path = 2;
	string value = 3;
}

// The subscribe update that can return either a synchronous
// update regarding a subscription, or an async update.
message SubscribeUpdate {
	oneof response {
		SubscribeUpdateResponse subscribe_update_async = 1;
		SubscribeResponse subscribe_update_sync = 2;
	}
}